#!/bin/bash

# –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç GraphRAG Web Platform
# –¶–µ–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î —Å–∏—Å—Ç–µ–º—É

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# ASCII Art –ª–æ–≥–æ—Ç–∏–ø
echo -e "${PURPLE}"
cat << "EOF"
   ____                 _     _____            _____ 
  / ___|_ __ __ _ _ __ | |__ |  _  \     /\   / ____|
 | |  _| '__/ _` | '_ \| '_ \| |_) |    /  \ | |  __ 
 | |_| | | | (_| | |_) | | | |  _ <    / /\ \| | |_ |
  \____|_|  \__,_| .__/|_| |_|_| \_\  / ____ \ |__| |
                 | |                /_/    \_\_____|
                 |_|                                 
   Web Platform for Knowledge Graphs
EOF
echo -e "${NC}"

info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
check_command() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
step "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    info "‚úÖ Linux OS –≤–∏—è–≤–ª–µ–Ω–æ"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    info "‚úÖ macOS –≤–∏—è–≤–ª–µ–Ω–æ"
else
    warn "‚ö†Ô∏è  –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
if check_command docker; then
    info "‚úÖ Docker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    if docker --version | grep -q "Docker version"; then
        DOCKER_VERSION=$(docker --version | cut -d ' ' -f3 | cut -d ',' -f1)
        info "   –í–µ—Ä—Å—ñ—è: $DOCKER_VERSION"
    fi
else
    error "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose
if check_command docker-compose || docker compose version &>/dev/null; then
    info "‚úÖ Docker Compose –¥–æ—Å—Ç—É–ø–Ω–∏–π"
else
    error "‚ùå Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
if check_command node; then
    info "‚úÖ Node.js –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    NODE_VERSION=$(node --version)
    info "   –í–µ—Ä—Å—ñ—è: $NODE_VERSION"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
    NODE_MAJOR=$(echo $NODE_VERSION | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_MAJOR" -lt 18 ]; then
        warn "‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è Node.js 18+, –ø–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $NODE_VERSION"
    fi
else
    error "‚ùå Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
if check_command npm; then
    info "‚úÖ npm –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    NPM_VERSION=$(npm --version)
    info "   –í–µ—Ä—Å—ñ—è: $NPM_VERSION"
else
    error "‚ùå npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
if check_command python3; then
    info "‚úÖ Python 3 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    PYTHON_VERSION=$(python3 --version)
    info "   –í–µ—Ä—Å—ñ—è: $PYTHON_VERSION"
else
    warn "‚ö†Ô∏è  Python 3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)"
fi

echo

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –∑–∞–ø—É—Å–∫—É
step "–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞–ø—É—Å–∫—É:"
echo "1) Docker Compose (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)"
echo "2) –õ–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞"
echo "3) –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API"
echo "4) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"
echo

read -p "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-4): " choice

case $choice in
    1)
        step "üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
        if [ ! -f ".env" ]; then
            info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É –∑ –ø—Ä–∏–∫–ª–∞–¥—É..."
            cp env.example .env
            warn "‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π OpenAI API key!"
            echo
            read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É..."
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API key
        if grep -q "sk-your-openai-api-key-here" .env; then
            error "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–º—ñ–Ω—ñ—Ç—å 'sk-your-openai-api-key-here' –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π OpenAI API key —É .env —Ñ–∞–π–ª—ñ"
        fi
        
        info "OpenAI API key –∑–Ω–∞–π–¥–µ–Ω–æ ‚úÖ"
        
        # –ó–±—ñ—Ä–∫–∞ frontend
        step "–ó–±—ñ—Ä–∫–∞ frontend..."
        cd frontend
        if [ ! -d "node_modules" ]; then
            info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
            npm install
        fi
        
        info "–ó–±—ñ—Ä–∫–∞ Next.js –¥–æ–¥–∞—Ç–∫—É..."
        npm run build
        cd ..
        
        # –ó–∞–ø—É—Å–∫ Docker Compose
        step "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
        
        # –í–∏–±—ñ—Ä compose –∫–æ–º–∞–Ω–¥–∏
        if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
        else
            COMPOSE_CMD="docker compose"
        fi
        
        # –ó–±—ñ—Ä–∫–∞ —ñ –∑–∞–ø—É—Å–∫
        $COMPOSE_CMD build
        $COMPOSE_CMD up -d
        
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
        info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
        sleep 15
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è
        step "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
        
        if curl -f http://localhost:8000/health &>/dev/null; then
            info "‚úÖ Backend –ø—Ä–∞—Ü—é—î (http://localhost:8000)"
        else
            warn "‚ö†Ô∏è  Backend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        fi
        
        if curl -f http://localhost:3000 &>/dev/null; then
            info "‚úÖ Frontend –ø—Ä–∞—Ü—é—î (http://localhost:3000)"
        else
            warn "‚ö†Ô∏è  Frontend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        fi
        
        echo
        info "üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        echo
        echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:"
        echo "  üåê Frontend: http://localhost:3000"
        echo "  üîó Backend API: http://localhost:8000"
        echo "  üìö API Docs: http://localhost:8000/docs"
        echo "  üíö Health: http://localhost:8000/health"
        echo
        echo "üìä –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
        echo "  –õ–æ–≥–∏: $COMPOSE_CMD logs -f"
        echo "  –ó—É–ø–∏–Ω–∫–∞: $COMPOSE_CMD down"
        echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: $COMPOSE_CMD restart"
        ;;
        
    2)
        step "üõ†Ô∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏"
        
        # Backend
        info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è backend..."
        cd backend
        
        if [ ! -d "venv" ]; then
            info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Python virtual environment..."
            python3 -m venv venv
        fi
        
        info "–ê–∫—Ç–∏–≤–∞—Ü—ñ—è venv —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        cd ..
        
        # Frontend
        info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è frontend..."
        cd frontend
        
        if [ ! -d "node_modules" ]; then
            info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
            npm install
        fi
        cd ..
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env
        if [ ! -f ".env" ]; then
            cp env.example .env
        fi
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è startup —Å–∫—Ä–∏–ø—Ç—ñ–≤
        cat > start-backend.sh << 'EOF'
#!/bin/bash
cd backend
source venv/bin/activate
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
EOF
        
        cat > start-frontend.sh << 'EOF'
#!/bin/bash
cd frontend
npm run dev
EOF
        
        chmod +x start-backend.sh start-frontend.sh
        
        echo
        info "üéâ –õ–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞!"
        echo
        echo "üìã –î–ª—è –∑–∞–ø—É—Å–∫—É:"
        echo "  Backend: ./start-backend.sh"
        echo "  Frontend: ./start-frontend.sh"
        echo
        echo "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–¥–∞—Ç–∏ OpenAI API key —É .env —Ñ–∞–π–ª!"
        ;;
        
    3)
        step "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø—Ä–∞—Ü—é—î backend
        if ! curl -f http://localhost:8000/health &>/dev/null; then
            error "‚ùå Backend –Ω–µ –ø—Ä–∞—Ü—é—î. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É —Å–∏—Å—Ç–µ–º—É."
        fi
        
        info "‚úÖ Backend –¥–æ—Å—Ç—É–ø–Ω–∏–π"
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö endpoints
        echo
        info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoints..."
        
        # Health check
        echo -n "Health check: "
        if curl -s http://localhost:8000/health | jq -e '.status == "healthy"' &>/dev/null; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi
        
        # Files endpoint
        echo -n "Files API: "
        if curl -s http://localhost:8000/api/files &>/dev/null; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi
        
        # Chat health
        echo -n "Chat API: "
        if curl -s http://localhost:8000/api/chat/health &>/dev/null; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi
        
        echo
        info "üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        ;;
        
    4)
        step "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env
        if [ -f ".env" ]; then
            info "‚úÖ .env —Ñ–∞–π–ª —ñ—Å–Ω—É—î"
            
            if grep -q "OPENAI_API_KEY=sk-" .env && ! grep -q "sk-your-openai-api-key-here" .env; then
                info "‚úÖ OpenAI API key –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
            else
                warn "‚ö†Ô∏è  OpenAI API key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            fi
        else
            warn "‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ—î–∫—Ç—É
        info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ—î–∫—Ç—É..."
        
        directories=("backend" "frontend" "config" "scripts" "data")
        for dir in "${directories[@]}"; do
            if [ -d "$dir" ]; then
                echo "  ‚úÖ $dir/"
            else
                echo "  ‚ùå $dir/ (–≤—ñ–¥—Å—É—Ç–Ω—è)"
            fi
        done
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
        if [ -f "docker-compose.yml" ]; then
            info "‚úÖ docker-compose.yml –∑–Ω–∞–π–¥–µ–Ω–æ"
        else
            warn "‚ö†Ô∏è  docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤
        info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤..."
        
        ports=(3000 8000)
        for port in "${ports[@]}"; do
            if lsof -i :$port &>/dev/null; then
                warn "‚ö†Ô∏è  –ü–æ—Ä—Ç $port –∑–∞–π–Ω—è—Ç–∏–π"
            else
                echo "  ‚úÖ –ü–æ—Ä—Ç $port –≤—ñ–ª—å–Ω–∏–π"
            fi
        done
        
        echo
        info "üéâ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        ;;
        
    *)
        error "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 1-4."
        ;;
esac

echo
echo -e "${PURPLE}======================================${NC}"
echo -e "${PURPLE}  GraphRAG Web Platform${NC}"
echo -e "${PURPLE}  –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!${NC}"
echo -e "${PURPLE}======================================${NC}"
echo
echo "üìö –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ—Å—É—Ä—Å–∏:"
echo "  üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: README.md"
echo "  üîß API –ø—Ä–∏–∫–ª–∞–¥–∏: examples/api_examples.md"
echo "  üöÄ –î–µ–ø–ª–æ–π–º–µ–Ω—Ç: scripts/deploy.sh"
echo "  üíæ Backup: scripts/backup.sh"
echo
echo "‚ùì –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞? –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ README.md –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å issue –Ω–∞ GitHub"
