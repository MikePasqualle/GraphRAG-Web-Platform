#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—É GraphRAG Web Platform
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./deploy.sh [production|development]

set -e

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
ENVIRONMENT=${1:-development}
PROJECT_DIR="$(dirname "$(dirname "$(readlink -f "$0")")")"

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü—ñ—ó
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if [[ "$ENVIRONMENT" != "production" && "$ENVIRONMENT" != "development" ]]; then
    error "–ù–µ–≤—ñ–¥–æ–º–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: $ENVIRONMENT. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'production' –∞–±–æ 'development'"
fi

step "üöÄ –î–µ–ø–ª–æ–π–º–µ–Ω—Ç GraphRAG Web Platform ($ENVIRONMENT)"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
fi

if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
    error "Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Compose —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
fi

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è docker compose (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –æ–±–æ—Ö –≤–µ—Ä—Å—ñ–π)
docker_compose() {
    if command -v docker-compose &> /dev/null; then
        docker-compose "$@"
    else
        docker compose "$@"
    fi
}

# –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
cd "$PROJECT_DIR"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
step "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
if [ ! -f ".env" ]; then
    warn ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –∑ –ø—Ä–∏–∫–ª–∞–¥—É..."
    cp env.example .env
    warn "‚ö†Ô∏è  –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π OpenAI API key"
fi

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è OpenAI API key
if grep -q "sk-your-openai-api-key-here" .env; then
    error "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—ñ–π OpenAI API key —É .env —Ñ–∞–π–ª—ñ"
fi

# –ó–±—ñ—Ä–∫–∞ frontend (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –≤ Docker —Ä–µ–∂–∏–º—ñ)
step "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Node.js –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–±—ñ—Ä–∫–∏
if command -v node &> /dev/null; then
    info "Node.js –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ frontend..."
    cd frontend
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if [ ! -d "node_modules" ]; then
        info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
        npm install
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∑–±—ñ—Ä–∫–∞ (–¥–ª—è development)
    if [ ! -d ".next" ] && [ "$ENVIRONMENT" = "development" ]; then
        info "–ó–±—ñ—Ä–∫–∞ frontend –¥–æ–¥–∞—Ç–∫—É..."
        npm run build
    fi
    
    cd ..
else
    info "Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–±—ñ—Ä–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"
fi

# –ó–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
step "–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤..."
docker_compose build --no-cache

step "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
if [ "$ENVIRONMENT" = "production" ]; then
    docker_compose -f docker-compose.yml up -d
else
    docker_compose up -d
fi

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤
step "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
sleep 15

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
step "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ backend
if curl -f http://localhost:8000/health &>/dev/null; then
    info "‚úÖ Backend service –ø—Ä–∞—Ü—é—î"
else
    error "‚ùå Backend service –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend
if curl -f http://localhost:3000 &>/dev/null; then
    info "‚úÖ Frontend service –ø—Ä–∞—Ü—é—î"
else
    warn "‚ö†Ô∏è  Frontend service –º–æ–∂–µ —â–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è..."
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Redis
if docker_compose ps redis | grep -q "Up"; then
    info "‚úÖ Redis –ø—Ä–∞—Ü—é—î"
else
    warn "‚ö†Ô∏è  Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ"
fi

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
step "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
docker_compose ps

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ (–æ—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤)
step "–û—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ backend:"
docker_compose logs --tail=20 backend

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
step "üéâ –î–µ–ø–ª–æ–π–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo
echo "üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏:"
echo "  Frontend: http://localhost:3000"
echo "  Backend API: http://localhost:8000"
echo "  API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: http://localhost:8000/docs"
echo "  Health check: http://localhost:8000/health"

if [ "$ENVIRONMENT" = "production" ]; then
    echo "  Nginx: http://localhost (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)"
fi

echo
echo "üìä –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
echo "  –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤: docker-compose logs -f [service-name]"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart [service-name]"
echo "  –ó—É–ø–∏–Ω–∫–∞: docker-compose down"
echo "  –°—Ç–∞—Ç—É—Å: docker-compose ps"
echo
echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
echo "  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: .env"
echo "  GraphRAG –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: config/settings.yml"
echo "  –î–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É: ./data/"

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è production
if [ "$ENVIRONMENT" = "production" ]; then
    echo
    echo "üîí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è production:"
    echo "  1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ —É nginx/ssl/"
    echo "  2. –ó–º—ñ–Ω—ñ—Ç—å SECRET_KEY —É .env —Ñ–∞–π–ª—ñ"
    echo "  3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª —Ç–∞ –æ–±–º–µ–∂—Ç–µ –¥–æ—Å—Ç—É–ø"
    echo "  4. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó ./data/"
    echo "  5. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫
if [ $? -eq 0 ]; then
    info "‚úÖ –î–µ–ø–ª–æ–π–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
else
    error "‚ùå –°—Ç–∞–ª–∏—Å—è –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥ —á–∞—Å –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—É"
fi
