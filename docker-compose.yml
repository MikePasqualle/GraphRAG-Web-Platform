version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: graphrag-backend
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GRAPHRAG_LLM_MODEL=gpt-4o-2024-11-20
      - GRAPHRAG_EMBEDDING_MODEL=text-embedding-3-large
      - GRAPHRAG_REASONING_EFFORT=high
      - GRAPHRAG_MAX_COMPLETION_TOKENS=4096
      - UPLOAD_MAX_SIZE=104857600
      - UPLOAD_DIR=/app/data/uploads
      - OUTPUT_DIR=/app/data/output
      - METADATA_DIR=/app/data/metadata
      - CACHE_DIR=/app/data/cache
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - WORKER_THREADS=4
      - MAX_CONCURRENT_INDEXING=3
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/app.log
      - SECRET_KEY=${SECRET_KEY:-default-secret-change-in-production}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=production
      - DEBUG=False
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - graphrag-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: graphrag-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_APP_NAME=GraphRAG Web Platform
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NEXT_PUBLIC_ENABLE_DARK_MODE=true
      - NEXT_PUBLIC_MAX_FILE_SIZE=104857600
      - NEXT_PUBLIC_SUPPORTED_FILE_TYPES=txt,pdf,docx
      - NEXT_PUBLIC_DEBUG=false
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - graphrag-network

  # Redis for background tasks (optional)
  redis:
    image: redis:7-alpine
    container_name: graphrag-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - graphrag-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: graphrag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - graphrag-network

volumes:
  redis_data:
    driver: local

networks:
  graphrag-network:
    driver: bridge
